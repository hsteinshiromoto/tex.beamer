name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - feature/**
      - release/**
      - bugfix/**
      - hotfix/**

    tags:
      - '**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: tex.beamer

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_base_image:
    name: Build docker image and push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get docker version
        id: docker_version
        run: | 
          echo "::set-output name=version::$(git ls-files -s Dockerfile.base | awk '{print $2}' | cut -c1-16)"

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Check if image exists
        id: image_exists
        run: |
          response=$(docker manifest inspect ghcr.io/${{ github.repository }}/$IMAGE_NAME.base:${{ steps.docker_version.outputs.version }} > /dev/null ; echo $?)
          echo ::set-output name=image_exists::$(echo ${response})

      - name: Build docker image if it is not on registry
        if: ${{ steps.image_exists.outputs.image_exists == 1 }}
        run: make base_image

      - name: Push image to Github Registry
        if: ${{ steps.image_exists.outputs.image_exists == 1 }}
        run: |
              IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME.base

              # Change all uppercase to lowercase
              IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

              # Strip git ref prefix from version
              VERSION=$(git ls-files -s Dockerfile.base | awk '{print $2}' | cut -c1-16)

              echo IMAGE_ID=$IMAGE_ID
              echo VERSION=$VERSION
              echo IMAGE_NAME=$IMAGE_NAME

              docker tag ${{ github.actor }}/$IMAGE_NAME.base:$VERSION $IMAGE_ID:$VERSION
              docker push $IMAGE_ID:$VERSION

              docker tag $IMAGE_ID:$VERSION $IMAGE_ID:latest
              docker push $IMAGE_ID:latest

  build_app_image:
    needs: [build_base_image]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Get docker version
        id: docker_version
        run: | 
          echo "::set-output name=version::$(git ls-files -s Dockerfile | awk '{print $2}' | cut -c1-16)"

      - name: Log into Github registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull image
        run: |
          # Strip git ref prefix from version
          VERSION=$(git ls-files -s Dockerfile.base | awk '{print $2}' | cut -c1-16)

          docker pull ghcr.io/${{ github.repository }}/$IMAGE_NAME.base:latest
          docker tag ghcr.io/${{ github.repository }}/$IMAGE_NAME.base:latest ${{ github.actor }}/$IMAGE_NAME.base:$VERSION

      - name: Build docker image
        run: make app_image

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with: 
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image to Docker hub Registry
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(git ls-files -s Dockerfile | awk '{print $2}' | cut -c1-16)

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo IMAGE_NAME=$IMAGE_NAME

          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME:$VERSION $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          docker tag $IMAGE_ID:$VERSION $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

  test:
    name: Test deck compilation
    needs: [build_app_image]
    runs-on: ubuntu-latest

    container:
      image: hsteinshiromoto/tex.beamer:latest
      
    steps:     
      - name: Compile
        run: |
          cd /home/tex.beamer
          make

      - name: Upload sample deck
        uses: actions/upload-artifact@v2
        with:
          name: main.pdf
          path: /home/tex.beamer/src/main.pdf
          if-no-files-found: error

  release:
    name: Build release
    needs: [test]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    container:
      image: hsteinshiromoto/tex.beamer:latest

    steps:
      - uses: actions/checkout@v2.2.0
        with:
          fetch-depth: 0 # This is necessary to get the second latest tag

      - name: Get previous tag
        run: echo "::set-output name=tag::$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1))"
        id: previous_tag

      - name: Get current tag
        run: | 
          echo "::set-output name=tag::${GITHUB_REF#refs/*/}"
        id: current_tag

      - uses: actions/checkout@v2
        with:
          ref: '${{ steps.previous_tag.outputs.tag }}'
          path: previous

      #! TODO: Check how to run latexdiff with arguments to files
      # - name: Run latexdiff
      #   run: latexdiff --flatten -t CULINECHBAR previous/src/main.tex src/main.tex > src/changes.tex

      # - name: Upload changes source
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: changes.tex
      #     path: /home/tex.beamer/src/changes.tex
      #     if-no-files-found: error

      # - name: Compile LaTeX difference document
      #   run: |
      #     PROJECT_PATH="/home/tex.beamer/src/"
      #     latexmk -xelatex -jobname=src/changes -usepretex="\\def\\rootpath{${PROJECT_PATH}/src}" src/changes.tex -f

      # - name: Upload log file
      #   uses: actions/upload-artifact@v2
      #   if: always()
      #   with:
      #     name: changes.log
      #     path: /home/tex.beamer/src/changes.log
      #     if-no-files-found: error

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.current_tag.outputs.tag }}
          release_name: Release ${{ github.ref }}
          body: |
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.previous_tag.outputs.tag }}...${{ steps.current_tag.outputs.tag }}
          draft: false
          prerelease: false

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: main.pdf
          path: src/

      - name: Upload deck to Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: src/main.pdf
          asset_name: main.pdf
          asset_content_type: application/pdf